{
  "hash": "507ed27b9965ea4c80d7d7f6cb2ed146",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pytorch Basics: Tensors\"\ndescription: \"Tensors lie at the heart of PyTorch. If we want to be proficient in PyTorch, we need to know what we can do with the `Tensor` object. There are over 1200 possible operations to perform on tensors, but only few are needed to get started with PyTorch. In this post we learn what a Tensor is and how to perform basic operations with them.\"\ndate: \"2025-05-06\" \njupyter: python3\n---\n\n## How to create a tensor?\nFirst, import PyTorch. After that we can create a tensor in multiple ways, we can create them from existing data, or we can initialize them with new data.\n\n\n\n::: {#358d4f15 .cell execution_count=2}\n``` {.python .cell-code}\n# Create a tensor from existing data\ndata = [[1, 2], [3, 4]]\ntensor_from_data = torch.tensor(data)\nprint(tensor_from_data)\n\n# Create a tensor with new data\nones_tensor = torch.ones((2,2))\nprint(ones_tensor)\n```\n:::\n\n\n<details>\n<summary>Show output</summary>\n\n::: {#4b04c76d .cell execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor([[1, 2],\n        [3, 4]])\ntensor([[1., 1.],\n        [1., 1.]])\n```\n:::\n:::\n\n\n</details>\n\n\n## How to do math with tensors?\nThere are three ways to perform a math operation in PyTorch. \n\n::: {#99ecad0f .cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Initialization code\"}\n# Initialize tensors to do math with\nshape = (2,2)\ntensor1 = torch.rand(shape)\ntensor2 = torch.ones(shape)\n```\n:::\n\n\n::: {#53fff4d4 .cell execution_count=5}\n``` {.python .cell-code}\n# 1. Python operators\ntensor1 + tensor2\n\n# 2. Built-in tensor method\ntensor1.add(tensor2)\n\n# 3. Output tensor\noutput_tensor = torch.zeros(shape)\ntorch.add(tensor1, tensor2, out=output_tensor)\n```\n:::\n\n\n:::{.callout-note appearance=\"default\"}\nCurrently, I am not sure about the difference between these three methods. I imagine that in a situation where we need to choose between these, one of the three method will feel most natural to use.\n:::\n\n## Some built-in tensor methods\n\nThere are over 1200 methods that we can perform on tensors. They can all be found at the [PyTorch documentation](https://docs.pytorch.org/docs/stable/torch.html). I skimmed through them and will give my beginner-opinion on which ones I believe will allow us to get a good start.\n\n<details>\n<summary><span class=\"foldable-h3\">Comparison Operations</span></summary>\n\n::: {#6716157f .cell execution_count=6}\n``` {.python .cell-code}\ntorch.equal(tensor1, tensor2)\ntorch.gt(tensor1, tensor2)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\ntensor([[False, False],\n        [False, False]])\n```\n:::\n:::\n\n\n</details>\n\n\n<details>\n<summary><span class=\"foldable-h3\">More creation methods</span></summary>\n\n::: {#e18bc2ec .cell execution_count=7}\n``` {.python .cell-code}\ntorch.full(size=(2,2), fill_value=3)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\ntensor([[3, 3],\n        [3, 3]])\n```\n:::\n:::\n\n\n</details>\n\n\n<details>\n<summary><span class=\"foldable-h3\">GPU Computations</span></summary>\nBeing able to store tensors on the GPU is actually one of the most important things in PyTorch. It allows to speed up computation drastically.\n</details>\n\n",
    "supporting": [
      "tensors_files"
    ],
    "filters": [],
    "includes": {}
  }
}