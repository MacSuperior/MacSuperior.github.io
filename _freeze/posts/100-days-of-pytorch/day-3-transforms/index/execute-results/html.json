{
  "hash": "1ea7528a89a8abc00cea083d41a3f1e8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Day 3: Pytorch Basics - Transforms\"\ndecsription: \"In this post, we will look at how to transform images using the built-in `ToTensor` method. We will also look at how to specify a tranform ourselves\"\njupyter: python3\n---\n\n## Why do we need transform?\n\nData comes in many different formats. On the other hand, PyTorch can only do machine learning with one data type, the tensor. Transforms can convert any data to a tensor. In this post, we will look at how to transform images. I will assume that you are familiar with PyTorch Datasets. If you are not, I recommend reading [this post]() before you continue.\n\n\n## How do PyTorch transforms work?\nAll built-in datasets from the torchvision module take the parameters `transform` and `target_tranform`. They take in a function that transforms input data into a tensor, following predefined steps. To avoid having to write these functions ourselves, the `torchvision.transforms` module come with an image-to-tensor transform, called `ToTensor` out of the box.\n\nLet's see an example through the FashionMNIST dataset.\n\n::: {#eb190fac .cell execution_count=1}\n``` {.python .cell-code}\nimport torch\nfrom torchvision.datasets import FashionMNIST\nfrom torchvision.transforms import ToTensor, Lambda\n```\n:::\n\n\n::: {#0cd9b3e0 .cell execution_count=2}\n``` {.python .cell-code}\ndef our_own_transformation(target):\n    \"\"\"\n    Transformes target label to a one-hot tensor\n    example:\n\n    >>> our_own_transformation(3)\n    >>> torch.tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0])\n    \"\"\"\n\n    zeros_list = torch.zeros(10, dtype=torch.float)\n    one_hot_index = torch.tensor(target)\n    one_hot_tensor = zeros_list.scatter_(0, one_hot_index, value=1)\n    return one_hot_tensor\n\nds_train = FashionMNIST(\n    root=\"data\",\n    train=True,\n    download=True,\n    transform=ToTensor(),\n    target_transform=Lambda(our_own_transformation)\n)\n\nds_test = FashionMNIST(\n    root=\"data\",\n    train=True,\n    download=True,\n    transform=ToTensor(),\n    target_transform=Lambda(our_own_transformation)\n)\n```\n:::\n\n\nIn this code, we specified that we want to convert our training data to a tensor using the `ToTensor` method, and the target label to a tensor using `our_own_transformation`.\n\n## Further reading\n\nThere are many more things we can do with transforms. We can rotate images, shift images, or we can chain transformations together to create a preprocessing pipeline. Since those usecases are too advanced for us at the moment, I will not cover them in this post. However, if you are curious or already more experienced, I recommend that you check out the [example section](https://docs.pytorch.org/vision/stable/auto_examples/index.html#gallery) on the Pytorch Website!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}